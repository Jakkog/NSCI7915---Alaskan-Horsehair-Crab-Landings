print(a+b)
}
sortandprint(a,b)
sortandprint(a)
sortandprint(a,b)
head(sortandprint(a,b))
head(sortandprint(a,b))
sortandprint <- function(a,b){
a<-sort(a)
b<-sort(b)
print(a+b)
return(a)
}
sortandprint(a,b)
View(sortandprint)
View(sortandprint)
sortandprint <- function(a,b){
a<-sort(a)
b<-sort(b)
print(a+b)
return(c)
}
sortandprint(a,b)
a
b
c
c
sortandprint(a,b)
sortandprint <- function(a){
a<-sort(a)
a
}
sortandprint(a)
sortandprint(b)
sortandprint <- function(a){
a<-sort(a)
}
sortandprint <- function(a){
a<-sort(a)
}
sortandprint <- function(a){
a<-sort(a)
a
}
sortandprint(a)
sortandprint(a)
View(sortandprint)
View(sortandprint)
sortandprint <- function(a){
a<-sort(a)
return(a)
}
sortandprint(b)
sortandprint(a)
sortandprint <- function(a){
a<-sort(a)
a
}
sortandprint(a)
sortandprint <- function(a,b){
a<-sort(a)
b<-sort(b)
return(a)
}
sortandprint(a,b)
sortandprint <- function(a,b){
a<-sort(a)
b<-sort(b)
return(a,b)
}
sortandprint(a,b)
sortandprint <- function(a,b){
a<-sort(a)
b<-sort(b)
return(a)
}
sortandprint(a,b)
sortandprint <- function(a,b){
a<-sort(a)
b<-sort(b)
return(b)
}
sortandprint(a,b)
sortandprint <- function(a,b){
a<-sort(a)
b<-rev(sort(b))
c<-a+b
return(list('first object' = a,
'second object' = b,
'summation' = c))
}
sortandprint(a,b)
a = runif(100)
b = runif(100)
sortandprint(a,b)
a = runif(10)
b = runif(10)
sortandprint(a,b)
a = rnorm(200)
b = rnorm(200)
sortandprint(a,b)
mylist = sortandprint(a,b)
mylist$c
mylist$summation
myList <- list()
myList[[1]] <- c('hello','world')
myList[[2]] <- 1:9
myList[[3]] <- 2^8
myList
x=9
x>10
x<10
x = 10
y = 50
x == 10 & y == 11
x == 10 & y == 50
x == 10 | y == 11
x == 10 | y == 50
x = mean(norm(10))
x = mean(rnorm(10))
if (x > 0.5) {
print('x is kind of big')
} else if (x > 0) {
print('x is not big, but positive')
} else {
print('x is negative')
}
x
for(i in 1:10) {
x = mean(rnorm(10))
if (x > 0.5) {
print('x is kind of big')
} else if (x > 0) {
print('x is not big, but positive')
} else {
print('x is negative')
}
}
loopedelse <- for(i in 1:10) {
x = mean(rnorm(10))
if (x > 0.5) {
print('x is kind of big')
} else if (x > 0) {
print('x is not big, but positive')
} else {
print('x is negative')
}
}
checkrandomNumbers <- function(iterations=10, numbers=10){
for (i in 1:iterations) {
x = mean(rnorm(numbers))
cat('iterations',i,' mean',x, '\n')
if (x>0.5){
print('x is kind of big')
} else if (x>0) {
print('x is not big, but positive')
} else {
print('x is negative')
}
}
}
checkrandomNumbers()
checkrandomNumbers <- function(iterations=100, numbers=100){
for (i in 1:iterations) {
x = mean(rnorm(numbers))
cat('iterations',i,' mean',x, '\n')
if (x>0.5){
print('x is kind of big')
} else if (x>0) {
print('x is not big, but positive')
} else {
print('x is negative')
}
}
}
checkrandomNumbers()
checkrandomNumbers <- function(iterations=10, numbers=10){
for (i in 1:iterations) {
x = mean(rnorm(numbers))
cat('iterations',i,' mean',x, '\n')
if (x>0.5){
print('x is kind of big')
} else if (x>0) {
print('x is not big, but positive')
} else {
print('x is negative')
}
}
}
checkrandomNumbers()
View(checkrandomNumbers)
View(checkrandomNumbers)
View(checkrandomNumbers)
edit(checkrandomNumbers())
edit(checkrandomNumbers
edit(checkrandomNumbers)
View(checkrandomNumbers)
edit(checkrandomNumbers)
edit(checkrandomNumbers)
View(checkrandomNumbers)
?cat
install.packages('treemap')
library(treemap)
t <- data.frame(1:9,sample(1:20,9,replace=T))
View(t)
#nkfd
colnames(t) <- c('ID','size')
treemap(t, index = 'ID', vSize = 'size', border.lwds = NA, fontsize.title = 0, lowerbound.cex.labels = 1, palette = "RdYlGn")
treemap(t, index = 'ID', vSize = 'size', border.lwds = NA, fontsize.title = 0, lowerbound.cex.labels = 1, palette = "RdYlGn")
treemap(t, index = 'ID', vSize = 'size', border.lwds = NA, fontsize.title = 0, lowerbound.cex.labels = 1, palette = "RdYlGn")
treemap(t, index = 'ID', vSize = 'size', border.lwds = NA, fontsize.title = 0, lowerbound.cex.labels = 1, palette = "RdYlGn")
treemap(t, index = 'ID', vSize = 'size', border.lwds = NA, fontsize.title = 0, lowerbound.cex.labels = 1, palette = "RdYlGn")
treemap(t, index = 'ID', vSize = 'size', border.lwds = NA, fontsize.title = 0, lowerbound.cex.labels = 5, palette = "RdYlGn")
treemap(t, index = 'ID', vSize = 'size', border.lwds = NA, fontsize.title = 0, lowerbound.cex.labels = 0, palette = "RdYlGn")
x <- rnorm(100)
y <- rnorm(100) + x
?colours
z <- rnorm(100) + z
install.packages('vioplot')
library(vioplot)
vioplot(x,y,z,col = c('red','dodgerblue','limegreen', h=0.25,ylog=F,names=c('x','y','z'))
vioplot(x,y,z,col = c('red','dodgerblue','limegreen'), h=0.25,ylog=F,names=c('x','y','z'))
vioplot(x,y,z,col = c('red','dodgerblue','limegreen'), h=5,ylog=F,names=c('x','y','z'))
vioplot(x,y,z,col = c('red','dodgerblue','limegreen'), h=100,ylog=F,names=c('x','y','z'))
vioplot(x,y,z,col = c('red','dodgerblue','limegreen'), h=101,ylog=F,names=c('x','y','z'))
vioplot(x,y,z,col = c('red','dodgerblue','limegreen'), h=1000,ylog=F,names=c('x','y','z'))
vioplot(x,y,z,col = c('red','dodgerblue','limegreen'), h=0.1,ylog=F,names=c('x','y','z'))
hist(x, breaks=30, main = NA, col = hsv(0.5, alpha = 0.3), border = 'black')
hist(y, breaks=30, add=T, col = hsv(0.1, alpha = 0.3), border = 'deeppink')
plot(density(x),col='black', main=NA, xlab='x or y')
lines(density(y), col='deeppink')
d <- density(x)
plot(density(x), col='black', main=NA, xlab='x or y')
polygon(d$x, d$y, col=hsv(h-.5,alpha = 0.3))
polygon(d$x, d$y, col=hsv(h=0.5,alpha = 0.3))
d <- density(y)
polygon(d$x,d$y,col=hsv(h=0.1,alpha=0.3),border='deeppink')
x <- rnorm(1000)
y <- rnorm(1000) +x
z<-rnorm(1000)+x
plot(x,y,cex=exp(z)^0.25,pch=21,bg='deeppink',col='black')
plot(x,y,cex=exp(z)^0.25,pch=21,bg='deeppink',col='white')
plot(x,y,cex=exp(z)^4,pch=21,bg='deeppink',col='white')
library(MASS)
k <-kde2d(x,y,z)
k <- kde2d(x,y,z)
k <- kde2d(x,y)
plot(x,y,col='grey80')
contour(k,drawlabels=F,col='red',add=T)
contour(k,drawlabels=T,col='red',add=T)
x <- exp(rnorn(100))
x <- exp(rnorm(100))
y <-exp(rnorm(100))
z <-exp(rnorm(100))
tx <-0.5*(2*x+y)/(x+y+z)
ty<-3^0.5/2*y/(x+y+z)
plot(tx,ty,axes=F,bty='n',xlab='',ylab='',pch=21,bg='dodgerblue',col='white',xlim=c(0,1),ylim=c(0,3^0.5/2))
polygon(c(0,1,0.5),c(0,0,3^0.5/2))
text(0,0,labels='x',pos=2,xpd=NA)
text(0.5,3^0.5/2,labels='y',pos=3,xpd=NA)
text(1,0,labels='z',pos=4,xpd=NA)
install.packages('plot3D')
library(plot3D)
x <-1:100/25
y <-1:100/25
h<- matrix(1,100,100)
persp3D(x,y,h,bty='n',colkey = F,facets = F,expand-0.1, box=F,scale=F,xpd=NA)
persp3D(x,y,h,bty='n',colkey = F,facets = F,expand=0.1, box=F,scale=F,xpd=NA)
persp3D(x,y,h,bty='n',colkey = F,facets = F,expand=0.1, box=F,scale=F,xpd=NA)
h<-(x*exp(-x)) %0% (y*exp(-y))
h<-(x*exp(-x)) %o% (y*exp(-y))
persp3D(x,y,h,bty='n',colkey = F,facets = F,expand=0.1, box=F,scale=F,xpd=NA)
install.packages('maps')
library(maps)
map(projection='rectangular',fill=T,col='grey90',parameters = 90)
install.packages('mapproj')
library(mapproj)
map(projection='rectangular',fill=T,col='grey90',parameters = 90)
points(x,y,pch=21,col='grey50',bg='gold',cex=0.7)
points(125,25,pch=21,col='grey50',bg='deeppink',cex=0.7)
rm(list =ls())
library(vcfR)
library("adegenet")
library(dartRverse)
install.packages("dartRverse")
library(dartRverse)
install.packages("dartRverse",dependencies = TRUE)
library(dartRverse)
install.packages("promises")
install.packages("promises")
library(promises)
install.packages("dartRverse",dependencies = TRUE)
library(dartRverse)
install.packages("promises", repos = "https://cloud.r-project.org/")
install.packages("promises", repos = "https://cloud.r-project.org/")
remove.packages("promises")
install.packages("promises", repos = "https://cloud.r-project.org/")
install.packages("promises", repos = "https://cloud.r-project.org/")
install.packages("promises", repos = "https://cloud.r-project.org/")
install.packages("promises", repos = "https://cloud.r-project.org/")
library(promises)
install.packages("dartRverse",dependencies = TRUE)
library(dartRverse)
install.packages("hmltools")
install.packages("hmltools")
library(devtools)
install.packages("devtools")
library(devtools)
remove.packages("devtools")
install.packages("devtools")
pkgbuild::has_build_tools(debug = TRUE)
pkgbuild::has_build_tools(debug = TRUE)
install.packages("devtools")
library(devtools)
devtools::install_github("username/hmltools")
install.packages("remotes")
library(remotes)
remotes::install_version("htmltools", version = "0.5.7")
install.packages("devtools")  # if not already installed
devtools::install_github("username/hmltools")
library(devtools)
devtools::install_github("username/hmltools")
remotes::install_version("htmltools", version = "0.5.7")
remove.packages("htmltools")
remotes::install_version("htmltools", version = "0.5.7")
Sys.setenv(PATH = paste("C:/rtools43/usr/bin", Sys.getenv("PATH"), sep = ";"))
Sys.which("make")
Sys.setenv(PATH = paste("C:/rtools44/usr/bin", Sys.getenv("PATH"), sep = ";"))
Sys.which("make")
pkgbuild::has_build_tools(debug = TRUE)
remotes::install_version("htmltools", version = "0.5.7")
filteredWild <- gl.filter.callrate(glWild,method = "locus", threshold = 0.8)
library(hmtmltools)
library(htmltools)
install.packages("dartRverse",dependencies = TRUE)
library(dartRverse)
pkgbuild::has_build_tools(debug = TRUE)
install.packages("hmltools")
remotes::install_github("rstudio/htmltools")
library(htmltools)
install.packages("dartRverse",dependencies = TRUE)
library(dartRverse)
dartRverse_install('all')
#########################################
# bioconductor package:
install.packages('BiocManager')
BiocManager::install('SNPRelate')
library(dartRverse)
install.packages('BiocManager')
BiocManager::install('SNPRelate')
install.packages("BiocManager")
library(dartRverse)
dartRverse_install('all')
# bioconductor package:
install.packages('BiocManager')
BiocManager::install('SNPRelate')
# bioconductor package:
install.packages('BiocManager')
BiocManager::install('SNPRelate')
warnings()
library(dartRverse)
library(dartRverse)
install.packages("dartR.captive")
library(dartRverse)
install.packages("dartR.popgen")
install.packages("dartR.sexlinked")
install.packages("dartR.sim")
install.packages("dartR.spatial")
library(dartRverse)
library(dartRverse)
library(dartR.captive)
library(dartR.popgen)
library(dartR.sexlinked)
library(dartR.sim)
library(dartR.spatial)
library(dartRverse)
library(dartR)
install.packages("C:/Users/ltger/OneDrive/Desktop/Postgrad/Masters/Units/S12025/Placement/BTRW_Rscripts/WildBTRW/dartR_2.9.7/dartR",
repos = NULL, type = "source")
library(dartR)
library(vcfR)
R.version
library("adegenet")
library(dartR.base)
R.version
install.packages("installr")
library(installr)
updateR()
install.packages("installr")
library(installr)
updateR()
q()
R.version
R.version
library(dartR)
install.packages("C:/Users/ltger/OneDrive/Desktop/Postgrad/Masters/Units/S12025/Placement/BTRW_Rscripts/WildBTRW/dartR_2.9.7/dartR",
repos = NULL, type = "source")
install.packages("C:/Users/ltger/OneDrive/Desktop/Postgrad/Masters/Units/S12025/Placement/BTRW_Rscripts/WildBTRW/dartR_2.9.7/dartR",
repos = NULL, type = "source")
library(vcfR)
install.packages("vcfR")
install.packages("adegenet")
library("adegenet")
library(dartR)
library(dartRverse)
install.packages(c(
"adegenet", "dartR.data", "fields", "foreach", "plyr",
"PopGenReport", "raster", "reshape2", "SNPRelate", "sp", "StAMPP"
))
install.packages(c("adegenet", "dartR.data", "fields", "foreach", "plyr", "PopGenReport", "raster", "reshape2", "SNPRelate", "sp", "StAMPP"))
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SNPRelate")
library(dartR.base)
install.packages("dartR.base")
library(dartR.base)
# Set working directory
setwd("C:/Users/ltger/OneDrive/Desktop/Postgrad/Masters/Units/S12025/Placement/BTRW_Rscripts/WildBTRW")
# Install required packages (if not already installed)
list_of_packages <- c("adegenet", "dartRverse", "vcfR", "SNPRelate")
new_packages <- list_of_packages[!(list_of_packages %in% installed.packages()[,"Package"])]
if(length(new_packages)) install.packages(new_packages)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
if (!requireNamespace("SNPRelate", quietly = TRUE))
BiocManager::install("SNPRelate")
# Load required libraries
library(adegenet)
library(dartR) # dartRverse loads dartR already.
library(vcfR)
library(SNPRelate)
# Load VCF data
vcf <- read.vcfR("wild_filteredSNPS.recode.vcf")
# Convert to genlight object
glWild <- vcfR2genlight(vcf)
# Convert to genlight object
glWild <- vcfR2genlight(vcf)
# Filter by call rate
filteredWild <- gl.filter.callrate(glWild, method = "locus", threshold = 0.8)
gl <- gl.compliance.check(gl)
# Filter by call rate
filteredWild <- gl.filter.callrate(glWild, method = "locus", threshold = 0.8)
View(vcf)
View(vcf)
setwd("C:/Users/ltger/OneDrive/Desktop/Postgrad/Masters/Units/S12025/Placement/BTRW_Rscripts/ManagedBTRW")
setwd("C:/Users/ltger/OneDrive/Desktop/datasets/Wk7_Carnivor")
matrix <- read.table("carnivore_matrix.txt")
matrix <- read.table("carnivore_matrix.txt", header = TRUE, sep = "\t")
View(matrix)
dataMatrix <- read.table("carnivore_matrix.txt", header = TRUE, sep = "\t")
rm(list = ls())
carnivore<- read.table("carnivore_matrix.txt", header = TRUE, sep = "\t")
metadata <- read.table("carnivore_metadata.txt", header = TRUE, sep = "\t")
metadata <- read.table("carnivore_metadata.txt", header = TRUE, sep = "")
carnivore <- read.delim("carnivore_matrix.txt", header = TRUE, sep = "\t")
metadata <- read.delin("carnivore_metadata.txt", header = TRUE, sep = "")
metadata <- read.delim("carnivore_metadata.txt", header = TRUE, sep = "")
metadata <- read.delim("carnivore_metadata.txt", header = TRUE)
carnivore <- read.delim("carnivore_matrix.txt", row.names = 1, header = TRUE, sep = "\t")
metadata <- read.delim("carnivore_metadata.txt", row.names = 1, header = TRUE)
d <- dist(carnivore)
plot(hclust(d),cex=0.5,ann=F)
plot(hclust(d, method = "average"),cex=0.5,ann=F)
f <- dist(metadata)
install.packages("vegan")
library(vegan)
f <- vegdist(carnivore)
plot(hclust(f),cex=0.5,ann=F)
plot(hclust(f, method = "average"),cex=0.5,ann=F)
d <- vegdist(N)
k <- cmdscale(f)
plot(k)
plot(k,cex=0)
text(k,labels = row.names(carnivore),cex = 0)
text(k,labels = row.names(carnivore),cex = 0)
plot(k,cex=0)
text(k,labels = row.names(carnivore),cex = 0)
plot(k,cex=0)
text(k,labels = row.names(carnivore),cex = 0)
text(k,labels = row.names(carnivore),cex = 0.5)
plot(k,cex=0)
text(k,labels = row.names(carnivore),cex = 0.5)
summary(cca(carnivore))
cc <- cca(carnivore)$CA
cc$u[,1]
# sites
cc$v[,1]
plot(cc$u, cols="blue")
points(cc$v, cols="red")
plot(cc$u, cos="blue")
points(cc$v, col="red")
# lines connect sites in their order across the matrix
lines(cc$v,col="red")
points(cc$u, col="red")
# lines connect sites in their order across the matrix
lines(cc$u,col="red")
text(cc$u,labels = row.names(carnivore),cex = 0.5)
library(usethis)
rm(list=ls())
library(usethis)
#----- setwd -----#
setwd("C:/Users/ltger/OneDrive/Desktop/datasets/Kaggle/Alaskan_HorsehairCrabLandings")
#----- setwd -----#
setwd("C:/Users/ltger/OneDrive/Desktop/datasets/Kaggle/Alaskan_HorsehairCrabLandings")
use_git()
use_git()
#----- setwd -----#
setwd("C:/Users/ltger/OneDrive/Desktop/datasets/Kaggle/Alaskan_HorsehairCrabLandings")
use_git()
getwd()
use_git(path = getwd())
use_git(path = "C:/Users/ltger/OneDrive/Desktop/datasets/Kaggle/Alaskan_HorsehairCrabLandings")
